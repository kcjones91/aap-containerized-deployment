---
- name: Generate a test ID
  ansible.builtin.set_fact:
    test_id: "{{ lookup('password', '/dev/null chars=ascii_letters length=16') }}"
  when: test_id is not defined

- name: Generate names
  ansible.builtin.set_fact:
    username: "Gateway-Collection-tests-user-user-{{ test_id }}"
    name_prefix: "Gateway-Collection-tests-org-{{ test_id }}"


- name: Run Tests
  module_defaults:
    group/ansible.platform.gateway:
      gateway_hostname: "{{ gateway_hostname }}"
      gateway_username: "{{ gateway_username }}"
      gateway_password: "{{ gateway_password }}"
      gateway_validate_certs: "{{ gateway_validate_certs | bool }}"

  block:
    # Test simple creation with check mode
    - name: Create Joe user with check mode
      ansible.platform.user:
        username: "{{ username }}"
        first_name: Joe
        password: "{{ 65535 | random | to_uuid }}"
      check_mode: true

    - name: Search for Joe user and assert that it does not exist
      ansible.builtin.set_fact:
        item_that_should_not_exist: "{{ lookup('ansible.platform.gateway_api', 'users',
          query_params={'username': '{{ username }}'}, **connection_info) }}"

    - name: Assert that Joe user does not exist
      ansible.builtin.assert:
        that:
          - item_that_should_not_exist is not defined or item_that_should_not_exist | length == 0
        fail_msg: "User '{{ username }}' unexpectedly exists in the system!"

    # Test simple creation
    - name: Create Joe user
      ansible.platform.user:
        username: "{{ username }}"
        first_name: Joe
        password: "{{ 65535 | random | to_uuid }}"
      register: joe

    - name: Assert the creation of the user changed the system
      ansible.builtin.assert:
        that:
          - joe is changed

    - name: Create Timmy user
      ansible.platform.user:
        username: "timmy-{{ username }}"
        first_name: Timmy
        password: "{{ 65535 | random | to_uuid }}"
      register: timmy

    - name: Assert the creation of the user changed the system
      ansible.builtin.assert:
        that:
          - timmy is changed

    # Check idempotency
    - name: Recreate Joe
      ansible.platform.user:
        username: "{{ username }}"
        first_name: Joe
        state: present
      register: joe_recreate

    - name: Assert a recreation does not change anything
      ansible.builtin.assert:
        that:
          - joe_recreate is not changed

    # Check modification
    - name: Give Joe superuser
      ansible.platform.user:
        username: "{{ username }}"
        is_superuser: true
      register: joe_superuser

    - name: Assert that this changed the user
      ansible.builtin.assert:
        that:
          - joe_superuser is changed

    - name: Give Timmy auditor
      ansible.platform.user:
        username: "timmy-{{ username }}"
        is_platform_auditor: true
      register: timmy_auditor

    - name: Assert that this changed the user
      ansible.builtin.assert:
        that:
          - timmy_auditor is changed

    - name: Revert Timmy auditor
      ansible.platform.user:
        username: "timmy-{{ username }}"
        is_platform_auditor: false
      register: timmy_auditor

    - name: Assert that this changed the user
      ansible.builtin.assert:
        that:
          - timmy_auditor is changed

    # Check idempotency when using a user id instead of a name
    - name: Give Joe superuser via his id instead of username
      ansible.platform.user:
        username: "{{ joe.id }}"
        is_superuser: true
      register: joe_superuser_again

    - name: Assert that changing the user a second time did not change anything
      ansible.builtin.assert:
        that:
          - joe_superuser_again is not changed

    # Change a user by their ID
    - name: Change Joe to Jane via ID
      ansible.platform.user:
        username: "{{ joe.id }}"
        first_name: Jane
      register: jane

    - name: Assert that the user change worked
      ansible.builtin.assert:
        that:
          - jane is changed

    # Delete a user
    # Always Cleanup
    - name: Delete user
      ansible.platform.user:
        username: "{{ username }}"
        state: absent
      register: delete

    - name: Assert user deletions passed
      ansible.builtin.assert:
        that:
          - delete is changed

    - name: Create a user like in AAP-36722
      ansible.platform.user:
        username: "{{ username }}"
        password: ansible
        update_secrets: false
        state: present

    - name: Create the user again for AAP-36722 (this would fail before)
      ansible.platform.user:
        username: "{{ username }}"
        password: ansible
        update_secrets: false
        state: present

    - name: Create org1
      ansible.platform.organization:
        name: "{{ name_prefix }}-Org-1"
      register: org1

    - name: Create Doe user with org1
      ansible.platform.user:
        username: "{{ username }}-Doe"
        first_name: Doe
        password: "{{ 65535 | random | to_uuid }}"
        organizations:
          - "{{ org1.name }}"
      register: doe

    - name: Assert the creation of the user changed the system
      ansible.builtin.assert:
        that:
          - doe is changed

    - name: Create a user without any organizations
      ansible.platform.user:
        username: "{{ username }}-noorg"
        first_name: NoOrg
        password: "{{ 65535 | random | to_uuid }}"
      register: noorg_user

    - name: Assert the creation of the user changed the system
      ansible.builtin.assert:
        that:
          - noorg_user is changed

    - name: Add the user to org1
      ansible.platform.user:
        username: "{{ username }}-noorg"
        organizations:
          - "{{ org1.name }}"
      register: add_to_org

    - name: Assert that adding the organization changed the user
      ansible.builtin.assert:
        that:
          - add_to_org is changed

    - name: Create org2
      ansible.platform.organization:
        name: "{{ name_prefix }}-Org-2"
      register: org2

    - name: Create user with multiple organizations
      ansible.platform.user:
        username: "{{ username }}-multiorg"
        first_name: MultiOrg
        password: "{{ 65535 | random | to_uuid }}"
        organizations:
          - "{{ org1.name }}"
          - "{{ org2.name }}"
      register: multiorg_user

    - name: Assert the creation of the user changed the system
      ansible.builtin.assert:
        that:
          - multiorg_user is changed

    - name: Attempt to create a user with non-existent organization
      ansible.platform.user:
        username: "{{ username }}-invalid-org"
        first_name: InvalidOrg
        password: "{{ 65535 | random | to_uuid }}"
        organizations:
          - "Non-Existent-Organization-{{ test_id }}"
      register: invalid_org_result
      ignore_errors: true

    - name: Assert that the task failed with the expected error message
      ansible.builtin.assert:
        that:
          - invalid_org_result is failed

  always:
    # Always Cleanup
    - name: Delete organizations
      ansible.platform.organization:
        name: "{{ item }}"
        state: absent
      loop:
        - "{{ org2.name }}"
        - "{{ org1.name }}"
      register: delete_results
      ignore_errors: true

    - name: Delete users
      ansible.platform.user:
        username: "{{ item }}"
        state: absent
      loop:
        - "{{ username }}"
        - "{{ doe.username }}"
        - "timmy-{{ username }}"
        - "{{ username }}-noorg"
        - "{{ username }}-multiorg"
      register: delete_results
      ignore_errors: true
...
